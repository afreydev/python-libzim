name: release
on:
  release:
    types: [published]
    tags:
      - v*
  # Uncomment this if you'd like to test the build+release process on PRs too
  # (it will only test the build, it wont push to PyPI until a new release is tagged)
  # push:
  #   branches:
  #     - master
  # pull_request:
  #   branches:
  #     - master

env:
  LIBZIM_RELEASE: libzim_linux-x86_64-6.1.1
  LIBZIM_LIBRARY_PATH: lib/x86_64-linux-gnu/libzim.so.6.1.1
  LIBZIM_INCLUDE_PATH: include/zim
  CYTHON_VERSION: 0.29.6

jobs:
  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        # TODO: expand this to cross-platform builds (see V2 approach below)
        # os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.6, 3.7, 3.8]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64

      - name: Cache libzim dylib & headers
        uses: actions/cache@master
        id: cache-libzim
        with:
          path: libzim_linux
          key: $LIBZIM_RELEASE-libzim-cache

      - name: Download libzim dylib & headers from OpenZIM.org releases
        if: steps.cache-libzim.outputs.cache-hit != 'true'
        run: |
          wget -q https://download.openzim.org/release/libzim/$LIBZIM_RELEASE.tar.gz
          tar --gunzip --extract --file=$LIBZIM_RELEASE.tar.gz
          mv $LIBZIM_RELEASE libzim_linux

      - name: Link libzim dylib & headers into workspace lib and include folders
        run: |
          ln -s $GITHUB_WORKSPACE/libzim_linux/$LIBZIM_LIBRARY_PATH lib/libzim.so
          ln -s $GITHUB_WORKSPACE/libzim_linux/$LIBZIM_INCLUDE_PATH include/zim

      - name: Build cython, sdist, and bdist_wheels
        run: |
          pip install --upgrade cython==$CYTHON_VERSION setuptools pip
          python3 setup.py build_ext --inplace
          python3 setup.py sdist bdist_wheel
          python -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v1
        with:
          name: wheels
          path: ./wheelhouse

      - name: Push release to PyPI
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

### TODO V2: The more modern wheel-based cross-platform binary distribution approach

  # manylinux-release-wheel:
  #   name: Build release wheels for manylinux2010
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: 3.6
  #     - name: Build manylinux2010 wheels
  #       run: |
  #         docker run -e manylinux2010 tools/ci_build/builds/release_linux.sh
  #         python3 -m pip install -U auditwheel
  #         for f in artifacts/*.whl; do
  #           auditwheel repair --plat manylinux2010_x86_64 $f
  #         done
  #         ls -al wheelhouse/

  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: ${{ runner.os }}-wheels
  #         path: wheelhouse

  # macos-release-wheel:
  #   name: Build release wheels for macOS
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       python-version: ['3.6', '3.7', '3.8']
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Build macOS wheels
  #       if: github.event_name == 'release'
  #       run: |
  #         python3 --version
  #         python3 -m pip install cython wheel setuptools
  #         bazel build \
  #           -c opt \
  #           --copt -mmacosx-version-min=10.13 \
  #           --linkopt -mmacosx-version-min=10.13 \
  #           --noshow_progress \
  #           --noshow_loading_progress \
  #           --verbose_failures \
  #           --test_output=errors \
  #           build_pip_pkg
  #         bazel-bin/build_pip_pkg artifacts
  #         for f in artifacts/*.whl; do
  #           delocate-wheel -w wheelhouse $f
  #         done
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: ${{ runner.os }}-wheels
  #         path: wheelhouse

  # windows-release-wheel:
  #   name: Build release wheels for Windows
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       python-version: ['3.6', '3.7', '3.8']
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v1
  #       with:
  #         python-version: ${{ matrix.python-version }}
  #     - name: Build Windows wheels
  #       shell: bash
  #       if: github.event_name == 'release'
  #       run: |
  #         python -m pip install cython wheel setuptools
  #         # TODO build here
  #     - uses: actions/upload-artifact@v1
  #       with:
  #         name: ${{ runner.os }}-wheels
  #         path: artifacts

  # upload-wheels:
  #   name: Publish wheels to PyPi
  #   needs: [manylinux-release-wheel, macos-release-wheel, windows-release-wheel]
  #   runs-on: ubuntu-18.04
  #   steps:
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: Linux-wheels
  #         path: Linux-wheels
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: macOS-wheels
  #         path: macOS-wheels
  #     - uses: actions/download-artifact@v1
  #       with:
  #         name: Windows-wheels
  #         path: Windows-wheels
  #     - run: |
  #         set -e -x
  #         mkdir -p dist
  #         cp Linux-wheels/*.whl dist/
  #         cp macOS-wheels/*.whl dist/
  #         cp Windows-wheels/*.whl dist/
  #         ls -la dist/
  #         sha256sum dist/*.whl

  #     - uses: pypa/gh-action-pypi-publish@master
  #       if: github.event_name == 'release'
  #       with:
  #         user: __token__
  #         password: ${{ secrets.pypi_token }}
